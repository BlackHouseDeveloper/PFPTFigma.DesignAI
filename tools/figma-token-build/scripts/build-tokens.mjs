#!/usr/bin/env node

/**
 * build-tokens.mjs
 * Uses Style Dictionary to transform design tokens into platform-specific formats.
 * Generates XAML, CSS, and JSON artifacts.
 */

import { execSync } from 'child_process';
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const TOKENS_DIR = path.join(__dirname, '..', '..', '..', 'src', 'Shared.UI', 'Design', 'tokens');
const ARTIFACTS_DIR = path.join(__dirname, '..', '..', '..', 'artifacts');
const STYLES_DIR = path.join(__dirname, '..', '..', '..', 'src', 'Shared.UI', 'Styles');
const CSS_DIR = path.join(__dirname, '..', '..', '..', 'src', 'Shared.UI', 'wwwroot', 'css');

/**
 * Check if tokens directory exists and has files
 */
function validateTokensExist() {
  console.log('üîç Checking for token files...');
  
  if (!fs.existsSync(TOKENS_DIR)) {
    console.error('‚ùå Error: tokens/ directory does not exist.');
    console.error('Please run "pnpm run figma:pull" first to fetch tokens from Figma.');
    process.exit(1);
  }

  const tokenFiles = fs.readdirSync(TOKENS_DIR).filter(f => f.endsWith('.json'));
  
  if (tokenFiles.length === 0) {
    console.error('‚ùå Error: No token files found in tokens/ directory.');
    console.error('Please run "pnpm run figma:pull" first to fetch tokens from Figma.');
    process.exit(1);
  }

  console.log(`‚úÖ Found ${tokenFiles.length} token file(s): ${tokenFiles.join(', ')}`);
}

/**
 * Ensure output directories exist
 */
function ensureOutputDirs() {
  [ARTIFACTS_DIR, STYLES_DIR, CSS_DIR].forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`üìÅ Created ${path.basename(dir)}/ directory`);
    }
  });
}

/**
 * Run Style Dictionary build
 */
function buildTokens() {
  console.log('üî® Building design tokens with Style Dictionary...');
  
  try {
    // Run style-dictionary build command with explicit config path
    const rootDir = path.join(__dirname, '..', '..', '..');
    // Allow config path to be set via env var or --config argument
    let configPath = process.env.STYLE_DICTIONARY_CONFIG;
    if (!configPath) {
      // Check for --config argument
      const configArgIndex = process.argv.indexOf('--config');
      if (configArgIndex !== -1 && process.argv.length > configArgIndex + 1) {
        configPath = process.argv[configArgIndex + 1];
      }
    }
    if (!configPath) {
      configPath = path.join(rootDir, 'style-dictionary.config.mjs');
    }
    
    execSync(`npx style-dictionary build --config ${configPath}`, {
      cwd: rootDir,
      stdio: 'inherit'
    });
    
    console.log('‚úÖ Token build completed successfully');
  } catch (error) {
    console.error('‚ùå Failed to build tokens:', error.message);
    process.exit(1);
  }
}

/**
 * Copy generated files to proper locations with headers
 */
function copyAndAnnotateArtifacts() {
  console.log('üìã Copying artifacts to proper locations...');
  
  const autoGenHeader = `<!--
  AUTO-GENERATED from /src/Shared.UI/Design/tokens/app.tokens.json
  DO NOT EDIT THIS FILE MANUALLY
  Generated: ${new Date().toISOString()}
-->
`;

  const cssAutoGenHeader = `/*
 * AUTO-GENERATED from /src/Shared.UI/Design/tokens/app.tokens.json
 * DO NOT EDIT THIS FILE MANUALLY
 * Generated: ${new Date().toISOString()}
 */

`;

  // Copy and annotate XAML
  const xamlSource = path.join(ARTIFACTS_DIR, 'design-tokens.xaml');
  const xamlDest = path.join(STYLES_DIR, 'Theme.xaml');
  if (fs.existsSync(xamlSource)) {
    let xamlContent = fs.readFileSync(xamlSource, 'utf-8');
    xamlContent = autoGenHeader + xamlContent;
    fs.writeFileSync(xamlDest, xamlContent);
    console.log(`  ‚úÖ Theme.xaml ‚Üí /src/Shared.UI/Styles/`);
  }

  // Copy and annotate CSS
  const cssSource = path.join(ARTIFACTS_DIR, 'design-tokens.css');
  const cssDest = path.join(CSS_DIR, '_tokens.css');
  if (fs.existsSync(cssSource)) {
    let cssContent = fs.readFileSync(cssSource, 'utf-8');
    cssContent = cssAutoGenHeader + cssContent;
    fs.writeFileSync(cssDest, cssContent);
    console.log(`  ‚úÖ _tokens.css ‚Üí /src/Shared.UI/wwwroot/css/`);
  }
}

/**
 * Verify artifacts were created
 */
function verifyArtifacts() {
  console.log('üîç Verifying generated artifacts...');
  
  const expectedFiles = [
    { path: path.join(ARTIFACTS_DIR, 'design-tokens.css'), name: 'design-tokens.css' },
    { path: path.join(ARTIFACTS_DIR, 'design-tokens.xaml'), name: 'design-tokens.xaml' },
    { path: path.join(ARTIFACTS_DIR, 'design-tokens.json'), name: 'design-tokens.json' },
    { path: path.join(STYLES_DIR, 'Theme.xaml'), name: 'Theme.xaml' },
    { path: path.join(CSS_DIR, '_tokens.css'), name: '_tokens.css' }
  ];

  const missingFiles = [];
  
  expectedFiles.forEach(file => {
    if (fs.existsSync(file.path)) {
      const stats = fs.statSync(file.path);
      console.log(`  ‚úÖ ${file.name} (${stats.size} bytes)`);
    } else {
      missingFiles.push(file.name);
      console.log(`  ‚ùå ${file.name} - NOT FOUND`);
    }
  });

  if (missingFiles.length > 0) {
    console.error(`\n‚ùå Warning: ${missingFiles.length} expected file(s) were not generated.`);
  } else {
    console.log('\n‚úÖ All expected artifacts were generated successfully');
  }
}

/**
 * Main execution
 */
async function main() {
  console.log('üöÄ Starting token build process...\n');
  
  try {
    validateTokensExist();
    ensureOutputDirs();
    buildTokens();
    copyAndAnnotateArtifacts();
    verifyArtifacts();
    
    console.log('\n‚ú® Token build process completed!');
  } catch (error) {
    console.error('\n‚ùå Token build failed:', error.message);
    process.exit(1);
  }
}

main();
